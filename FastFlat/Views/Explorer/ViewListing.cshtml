@model ListingViewModel
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager

@section Styles {
    <link rel="stylesheet" href="~/css/viewlisting.css" />
}
@{
    var loggedInUser = await UserManager.GetUserAsync(User);
}
<div class="hero">
    <div class="rental-wrapper">
        @if (loggedInUser != null && Model.User?.Id == loggedInUser.Id)
        {

            <div class="title-top">
                <img class="title-top-icon" src="/images/icons/icon_theme_color.svg" alt = "Location Pin">
                <h3 class="rental-top-title">@Model.Listing.ListningAddress</h3>
            </div>
            <img class="rental-banner" src="@Model.Listing.ListningImageURL" alt="Forside bilde." />
            <div class="rental-content">
                <div class="rental-about" style="width: 100%;">
                    <h1 class="rental-title">@Model.Listing.ListningName</h1>
                    <p class="rental-info">Antall senger @Model.Listing.NoOfBeds · Størrelse @Model.Listing.SquareMeter</p>
                    <hr>
                    <p class="rental-subtitle">Your info:</p>
                    <div class="rental-host-contact">

                        @{
                            System.Diagnostics.Debug.Assert(Model.User.ProfilePicture != null, "Model.User.ProfilePicture != null");
                        }
                        <img class="rental-host-img" src="data:image/*;base64,@(Convert.ToBase64String(Model.User.ProfilePicture))" alt="Host Image">
                        <div class="rental-host-info">
                            <p class="rental-info-sub">Name:</p>
                            <p>@Model.User.FirstName @Model.User.LastName</p>

                        </div>
                        <div class="rental-host-info-contact">
                            <p class="rental-info-sub">Contact</p>
                            <p>@Model.User.Email @Model.User.PhoneNumber</p>
                        </div>
                    </div>

                    <hr>
                    <p class="rental-subtitle">About this rental:</p>
                    <p class="rental-desc">@Model.Listing.ListningDescription</p>
                    <hr>
                    <p class="rental-subtitle">This rental offers:</p>
                    <div class="rental-amenities">
                        @if (Model.Listing.ListningAmenities != null)
                        {
                            foreach (var amenity in Model.Listing.ListningAmenities)
                            {
                                //var isActive = (amenity.AmenityName == (string)ViewBag.SelectedAmenity) ? "active" : ""; // Dette antar at du lagrer den valgte amenity i ViewBag
                                <button type="submit" name="SelectedAmenities" value="@amenity.Amenity?.AmenityName" class="amenity-button" onclick="addAmenity('@amenity.Amenity?.AmenityName')" id="@amenity.Amenity!.AmenityName">
                                    @amenity.Amenity.AmenityName
                                    <img class="amenity-icon" src="@amenity.Amenity.AmenityLogo" alt="@amenity.AmenityId"/>
                                </button>
                            }
                        }
                    </div>
                    <hr>
                    <p class="rental-subtitle">The neighbourhood:</p>
                    <div id="map">
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="title-top">
                <img class="title-top-icon" src="/images/icons/icon_theme_color.svg">
                <h3 class="rental-top-title">@Model.Listing.ListningAddress</h3>
            </div>
            <img class="rental-banner" src="@Model.Listing.ListningImageURL" alt="Forside bilde." />
            <div class="rental-content">
                <div class="rental-about">
                    <h1 class="rental-title">@Model.Listing.ListningName</h1>
                    <p class="rental-info">Antall senger @Model.Listing.NoOfBeds - Størrelse @Model.Listing.SquareMeter</p>
                    <hr>
                    <p class="rental-subtitle">Meet the host:</p>
                    <div class="rental-host-contact">
                        <img class="rental-host-img" src="data:image/*;base64,@(Convert.ToBase64String(Model.User.ProfilePicture))">
                        <div class="rental-host-info">
                            <p class="rental-info-sub">Name:</p>
                            <p>@Model.User.FirstName @Model.User.LastName</p>
                       
                        </div>
                        <div class="rental-host-info-contact">
                            <p class="rental-info-sub">Contact</p>
                            <p>@Model.User.Email @Model.User.PhoneNumber</p>
                        </div>
                    </div>
                   
                    <hr>
                    <p class="rental-subtitle">About this rental:</p>
                    <p class="rental-desc">@Model.Listing.ListningDescription</p>
                    <hr>
                    <p class="rental-subtitle">This rental offers:</p>
                    <div class="rental-amenities">
                        @foreach (var amenity in Model.Listing.ListningAmenities!)
                        {
                        //var isActive = (amenity.AmenityName == (string)ViewBag.SelectedAmenity) ? "active" : ""; // Dette antar at du lagrer den valgte amenity i ViewBag
                            <button type="submit" name="SelectedAmenities" value="@amenity.Amenity?.AmenityName" class="amenity-button" onclick="addAmenity('@amenity.Amenity!.AmenityName')" id="@amenity.Amenity.AmenityName">
                                @amenity.Amenity.AmenityName
                                <img class="amenity-icon" src="@amenity.Amenity.AmenityLogo" alt = @amenity.Amenity.AmenityName/>
                            </button>
                        }
                    </div>
                    <hr>
                    <p class="rental-subtitle">The close area:</p>
                    <div id="map">

                    </div>
                </div>
                <div class="rental-booking">
                    <form asp-action="ViewListing" method="post" enctype="form-data">
                        <input type="hidden" asp-for="@Model.Listing.ListningId" />
                        <input type="hidden" asp-for="@Model.Listing.ListningPrice" />
                        <p class="rental-price">@Model.Listing.ListningPrice NOK <span style="font-size: 1rem; color: gray; font-weight: normal;">/night</span></p>
                        <div class="form-dates">
                            <div class="form-group">
                                <label asp-for="@Model.Booking.FromDate">Available From</label><span class="text-danger">*</span>
                                <input asp-for="@Model.Booking.FromDate" id="fromDateInput" type="text" class="form-control" readonly />
                               
                            </div>
                            <div class="form-group">
                                <label asp-for="@Model.Booking.ToDate">Available To</label><span class="text-danger">*</span>
                                <input asp-for="@Model.Booking.ToDate" id="toDateInput" type="text" class="form-control" readonly />
                              
                            </div>
                        </div>
                        <div class="booking-summary-wrapper">
                            <div class="booking-summary">
                                <p id="summary-nights"></p>
                                <p id="nights-price"></p>
                            </div>
                            <div class="booking-summary">
                                <p>Service fee:</p>
                                <p id="booking-fee"></p>
                            </div>
                            <hr style="margin: 0.5rem 0;">
                            <div class="booking-summary">
                                <p class="price-total">Total</p>
                                <p class="price-total" id="booking-total"></p>
                            </div>
                        </div>
                        
                        @if (loggedInUser != null)
                        {
                            <button id="bookBtn" type="submit" class="btn btn-primary">Book now!</button>
                        }
                        else
                        {
                            <button disabled id="bookBtn" type="submit" class="btn btn-primary">Login to book.</button>
                        }
                        <span id="error-book" asp-validation-for="@Model.Booking.FromDate" class="text-danger"></span>
                    </form>
                </div>

            </div>
        }
    </div>
</div>
<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyBHz8GEbiV4GVf1ZLD1FBMOlFhYSOOp3oI",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });
</script>
<script>
    async function initMap() {

        const { Map } = await google.maps.importLibrary("maps");
        const { Marker } = await google.maps.importLibrary("marker");

        const myLatLng = {
            lat: parseFloat('@Model.Listing.ListningLat'),
            lng: parseFloat('@Model.Listing.ListningLng')
        }
        const map = new Map(document.getElementById('map'), {
            zoom: 12,
            center: myLatLng,
            mapId: "79bb9437d0fed325",
        });
        const marker = new Marker({
            map: map,
            position: myLatLng,
            title: "@Model.Listing.ListningName",
           
        });
    }
    initMap()


    $(document).ready(function () {
        var listingId = @Model.Listing.ListningId;

        // Fetch available dates
        fetchAvailableDates(listingId, function (availabilityData) {
            const fromDate = availabilityData.item1.split("T")[0];
            const toDate = availabilityData.item2.split("T")[0];

            // Fetch booked dates
            fetchBookedDates(listingId, function (bookedDates) {
                var convertedBookedDates = bookedDates.map(date => date.split('T')[0]);

                // Configure datepickers
                setupDatepickers(fromDate, toDate, convertedBookedDates);
            });
        });
    });

    function fetchAvailableDates(listingId, onSuccess) {
        $.ajax({
            url: '/Explorer/GetAvailableDates?listingId=' + listingId,
            method: 'GET',
            dataType: 'json',
            success: onSuccess,
            error: function (error) {
                console.error("Error fetching available dates:", error);
            }
        });
    }

    function fetchBookedDates(listingId, onSuccess) {
        $.ajax({
            url: '/Explorer/GetBookedDates?listingId=' + listingId,
            method: 'GET',
            dataType: 'json',
            success: onSuccess,
            error: function (error) {
                console.error("Error fetching booked dates:", error);
            }
        });
    }

    function setupDatepickers(fromDate, toDate, convertedBookedDates) {
        // Find the first available date after any booked dates before the fromDate
        let defaultFromDate = new Date(fromDate);
        while (convertedBookedDates.includes(jQuery.datepicker.formatDate('yy-mm-dd', defaultFromDate))) {
            defaultFromDate.setDate(defaultFromDate.getDate() + 1);
        }

        // Find the last consecutively available date after the defaultFromDate
        let defaultToDate = new Date(defaultFromDate);
        defaultToDate.setDate(defaultToDate.getDate() + 1);
        while (!convertedBookedDates.includes(jQuery.datepicker.formatDate('yy-mm-dd', defaultToDate)) &&
            defaultToDate < new Date(toDate)) {
            defaultToDate.setDate(defaultToDate.getDate() + 1);
        }
        defaultToDate.setDate(defaultToDate.getDate() - 1); // Subtract one day to get the last available date

        $("#fromDateInput").val(jQuery.datepicker.formatDate('yy-mm-dd', defaultFromDate));
        $("#toDateInput").val(jQuery.datepicker.formatDate('yy-mm-dd', defaultToDate));


        $("#fromDateInput").datepicker({
            dateFormat: "yy-mm-dd",
            minDate: fromDate,
            maxDate: toDate,
            beforeShowDay: function (date) {
                var string = jQuery.datepicker.formatDate('yy-mm-dd', date);
                return [convertedBookedDates.indexOf(string) === -1];
            },
            onSelect: function (selectedDate) {
                $("#toDateInput").datepicker("option", "minDate", selectedDate);
            }
        });

        $("#toDateInput").datepicker({
            dateFormat: "yy-mm-dd",
            minDate: fromDate,
            maxDate: toDate,
            beforeShowDay: function (date) {
                var string = jQuery.datepicker.formatDate('yy-mm-dd', date);
                return [convertedBookedDates.indexOf(string) === -1];
            }
        });

        let allDatesBooked = true;
        let checkDate = new Date(fromDate);
        while (checkDate <= new Date(toDate)) {
            if (!convertedBookedDates.includes(jQuery.datepicker.formatDate('yy-mm-dd', checkDate))) {
                allDatesBooked = false;
                break;
            }
            checkDate.setDate(checkDate.getDate() + 1);
        }

        if (allDatesBooked) {
            // Disable the input fields if all dates are booked
            $("#fromDateInput, #toDateInput").prop("disabled", true);
            $("#fromDateInput, #toDateInput").val("Full")
            $('#bookBtn').prop("disabled", true)
            $('#bookBtn').html("Fully booked, come back later")
            
        } else {
            // ... rest of your datepicker setup code ...
        }

        function logNumberOfDays() {
            const startDate = $("#fromDateInput").datepicker("getDate");
            const endDate = $("#toDateInput").datepicker("getDate");

            if (startDate && endDate) {
                const nightCount = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24));
                const nightPrice = @Math.Ceiling(Model.Listing.ListningPrice)
                $('#summary-nights').html("@Math.Ceiling(Model.Listing.ListningPrice) x " + (nightCount) + " nights")
                $('#nights-price').html(nightPrice*nightCount + " NOK")
                $('#booking-fee').html((nightPrice * nightCount) * 0.05 + " NOK")
                $('#booking-total').html((nightPrice * nightCount) * 1.05 + " NOK")
                $('#error-book').html(" ")

            }
        }

        // Log the number of days after setting the default values
        logNumberOfDays();

        $("#fromDateInput").change(() => {
            logNumberOfDays();
            
        })
        $("#toDateInput").change(() => {
            logNumberOfDays();
        })





    }

</script>
