@using System.Text.Json

@model RentalListViewModel

@section Styles {
    <link rel="stylesheet" href="~/css/explore.css" />
    <link rel="stylesheet" href="~/css/rentalCard.css" />
}

@{
    var simplifiedRentals = Model.Rentals.Select(r => new
    {
        ListningId = r.ListningId,
        ListningName = r.ListningName,
        ListningLat = r.ListningLat,
        ListningLng = r.ListningLng,
        ListningPrice = r.ListningPrice
        // ... other properties you want to include
    }).ToList();
}

<script>
    function addAmenity(amenity) {
        if (selectedAmenities.includes(amenity)) {
            let index = selectedAmenities.indexOf(amenity);
            if (index !== -1) {
                selectedAmenities.splice(index, 1);
            }
            $(`#${amenity}`).css("transform", "scale(1)")
            $(`#${amenity}`).css("color", "#808080")
            $(`#${amenity}`).css("font-weight", "regular")
            console.log("fjerner")
            search()
        }else{
            selectedAmenities.push(amenity)
            $(`#${amenity}`).css("transform", "scale(1.2)")
            $(`#${amenity}`).css("color", "black")
            $(`#${amenity}`).css("font-weight", "bold")
            console.log("legger til")
            search()
        }
    }
    

</script>

<section class="hero">
    <div class="search-section">
        <partial name="_SearchBar" model="Model"/>
    </div>
    <div id="filters">
        @foreach (var amenity in Model.Amenities)
        {
            //var isActive = (amenity.AmenityName == (string)ViewBag.SelectedAmenity) ? "active" : ""; // Dette antar at du lagrer den valgte amenity i ViewBag
            <button type="submit" name="SelectedAmenities" value="@amenity.AmenityName" class="amenity-button" onclick="addAmenity('@amenity.AmenityName')" id="@amenity.AmenityName">
                @amenity.AmenityName
                <img class="amenity-icon" src="@amenity.AmenityLogo" />
            </button>
        }
    </div>
    <div class="result-wrapper">
        <div id="results">
            @foreach (var rental in Model.Rentals)
            {
                <partial name="_RentalCard" model="rental" />
            }
        </div>
        <div id="map">
        </div>
    </div>
</section>
<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyBHz8GEbiV4GVf1ZLD1FBMOlFhYSOOp3oI",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });
</script>
<script>

    const rentalsArray = @Html.Raw(Json.Serialize(simplifiedRentals));

    async function initMap() {

        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        const myLatLng = { lat: parseFloat(rentalsArray[0].listningLat), lng: parseFloat(rentalsArray[0].listningLng) };

        const map = new Map(document.getElementById('map'), {
            zoom: 4,
            center: myLatLng,
            mapId: "79bb9437d0fed325",
        });


        let bounds = new google.maps.LatLngBounds();

        for (var i = 0; i < rentalsArray.length; i++) {
            const rentalPos = { lat: parseFloat(rentalsArray[i].listningLat), lng: parseFloat(rentalsArray[i].listningLng) }

            const content = document.createElement("div");
            content.className = "rental-marker";
            content.textContent = rentalsArray[i].listningPrice;

            const marker = new AdvancedMarkerElement({
                map: map,
                position: rentalPos,
                title: rentalsArray[i].listningName,
                content: content,
                collisionBehavior: "OPTIONAL_AND_HIDES_LOWER_PRIORITY",
            });

            (function (index) {
                marker.addListener('click', function () {
                    window.location.href = `/Explorer/ViewListing?listingId=${rentalsArray[index].listningId}`;
                });
            })(i);
            bounds.extend(rentalPos);
        }

        map.fitBounds(bounds);

        
    }
    initMap()

    const selectedAmenities = @Html.Raw(Json.Serialize(Model.SelectedAmenities));

    if (selectedAmenities.length > 0 && selectedAmenities) {
        selectedAmenities.forEach(amenity => {
            $(`#${amenity}`).css("transform", "scale(1.2)")
            $(`#${amenity}`).css("color", "black")
            $(`#${amenity}`).css("font-weight", "bold")
        })
    }

    // Get a reference to your div
    const results = document.getElementById('results');
    const filters = document.getElementById('filters');

    // Function to check if the div has been scrolled down
    function checkScroll() {
        const scrollTop = results.scrollTop;

        // Check if the div has been scrolled down (you can adjust the threshold)
        if (scrollTop > 10) {
            // Apply a box shadow or any other styling you want
            filters.style.boxShadow = '0px 23px 21px -22px rgba(0,0,0,0.75)';
        } else {
            // Remove the box shadow or reset styling when the div is at the top
            filters.style.boxShadow = 'none';
        }
    }

    // Attach the scroll event listener to your div
    results.addEventListener('scroll', checkScroll);

    // Call the checkScroll function on page load to handle initial scroll position
    checkScroll();


    // Parse the serialized data back into a JS array

    // Log the array to the console (for testing purposes)
    console.log(rentalsArray);

    // Now you can access each rental's properties in JavaScript:
    


</script>
