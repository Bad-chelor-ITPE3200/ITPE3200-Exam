@model NewListningViewModel
<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Update a listing"]</title>
</head>
            

<form asp-controller="Account" asp-action="UpdateListing" id ="form" enctype="multipart/form-data">
    <input type="hidden" asp-for="@Model.Listning.ListningId"/>
    <div class="form-group">
        <label asp-for="@Model.Listning.ListningName"></label>
        <span class="text-danger">*</span>
        <input asp-for="@Model.Listning.ListningName" class="form-control"/>
        <span asp-validation-for="@Model.Listning.ListningName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="@Model. Listning.ListningPrice"></label>
        <span class="text-danger">*</span>
        <input asp-for="@Model.Listning.ListningPrice" class="form-control"/>
        <span asp-validation-for="@Model.Listning.ListningPrice" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label for="ListningImage">Listning Image:</label>
        <p class="alert-warning"> NOTE: THIS NEED TO BE UPDATED</p>
        <input asp-for="ListningImage" type="file" accept=".png,.jpg,.jpeg" id="ListningImage"
        multiple="false" class="form-control-file">
        <span asp-validation-for="ListningImage" class="text-danger"></span>
    </div>*
    <div class="form-group">
        <label asp-for="@Model.Listning.FromDate">Available From</label>
        <span class="text-danger">*</span>
        <input asp-for="@Model.Listning.FromDate" id="fromDateInput" type="date" class="form-control" value="2023-09-30"/>
        <span asp-validation-for="@Model.Listning.FromDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="@Model.Listning.ToDate">Available To</label>
        <span class="text-danger">*</span>
        <input asp-for="@Model.Listning.ToDate" id="toDateInput" type="date" class="form-control" value="2023-10-30"/>
        <span asp-validation-for="@Model.Listning.ToDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="@Model.Listning.ListningDescription"></label>
        <input asp-for="@Model.Listning.ListningDescription" class="form-control"/>
        <span asp-validation-for="@Model.Listning.ListningDescription" class="text-danger"></span>
    </div>
  <div class="form-group">
            <label asp-for="Listning.ListningAddress">Address</label>
            <input asp-for="Listning.ListningAddress" class="form-control" id="address" />
            <span asp-validation-for="Listning.ListningAddress" class="text-danger"></span>
            <div id="addressResults"></div>
        </div>
    <div class="form-group">
        <label asp-for="@Model.Listning.SquareMeter"></label>
        <input asp-for="@Model.Listning.SquareMeter" class="form-control"/>
        <span asp-validation-for="@Model.Listning.SquareMeter" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Listning.NoOfBeds"></label>
        <input asp-for="Listning.NoOfBeds" class="form-control"/>
        <span asp-validation-for="Listning.NoOfBeds" class="text-danger"></span>
    </div>
    
    @** <h4>Select Amenities:</h4>**@
    @** for this version we also ignore the amenities TODO: hvis noen vil se på dette så værsegod
    @foreach (var amenity in Model.Amenities)
    {
        <input type="checkbox" name="SelectedAmenities" value="@amenity.AmenityId"/>
        @amenity.AmenityName


        <br/>
    }**@
    <button type="submit" class="btn btn-primary">update</button>
    <span asp-validation-for="SelectedAmenities" class="text-danger"></span>
    <input asp-for="Listning.ListningCity" class="form-control" id="cityInput" hidden/>
        <input asp-for="Listning.ListningCity" class="form-control" id="cityInput" hidden/>
             <input asp-for="Listning.ListningCountry" class="form-control" id="countryInput" hidden />
             <input asp-for="Listning.ListningLat" class="form-control" id="latInput" hidden/>
             <input asp-for="Listning.ListningLng" class="form-control" id="lngInput" hidden />

</form>
<script>
 document.getElementById('fromDateInput').addEventListener('change', function() {
         const selectedDate = this.value;
         document.getElementById('toDateInput').setAttribute('min', selectedDate);
     });
 
     document.getElementById('form').addEventListener('keydown', function (event) {
         if (event.key === "Enter") {
             console.log(event.key)
             event.preventDefault();
         }
     });
 
     const addressInput = $("#address")
     const addressOutput = document.getElementById("addressResults")
     let addressArray = []
 
     addressInput.keyup(async() => { 
         addressArray = []
         if (addressInput.val().length < 3) {
             addressOutput.innerHTML = ' '
             return
         }
         try{
             const response = await fetch(`/api/address-search?input=${encodeURIComponent(addressInput.val())}`)
 
             if (!response.ok) {
                 console.error('Failed to fetch cities:', response.statusText);
                 return;
             }
             const data = await response.json();
             addressArray = data.predictions
 
             addressOutput.innerHTML = '';
 
             if (Array.isArray(addressArray)) {
                 addressArray.forEach(address => {
             
                     addressOutput.innerHTML += `<button type="button" onclick="onPlaceSelected('${address.place_id}')"><strong>${address.description}</strong></button>`;
                 });
             } else {
                 console.error('Data is not an array:', data);
             }
 
             
         }catch(error){
             console.error('Error occurred:', error);
         }
     });
     
     function onPlaceSelected(placeId) {
 
         addressOutput.innerHTML = ' '
 
         fetch(`/api/place-details?placeId=${placeId}`)
             .then(response => response.json())
             .then(data => {
                 const result = data.result;
 
 
                 addressInput.val(result.formatted_address);
                 const addressComponents = result.address_components;
                 const address = result.formatted_address;
                 const cityComponent = addressComponents.find(comp => comp.types.includes("locality"))
                     || addressComponents.find(comp => comp.types.includes("postal_town"));
 
                 const city = cityComponent?.long_name;
                 const country = addressComponents.find(comp => comp.types.includes("country"))?.long_name;
                 const lat = result.geometry.location.lat;
                 const lng = result.geometry.location.lng;
 
                 console.log(result)
                 console.log(address)
                 console.log(city)
                 console.log(country)
                 console.log(lat, " ", lng)
 
                 document.getElementById("cityInput").value = city;
                 document.getElementById("countryInput").value = country;
                 document.getElementById("latInput").value = lat;
                 document.getElementById("lngInput").value = lng;
             });
     }
</script>

</html>